x-customizable-image: &customizable_image
  # By default the image used only contains the `frappe` and `erpnext` apps.
  # See https://github.com/frappe/frappe_docker/blob/main/docs/custom-apps.md
  # about using custom images.
  image: ${DOCKER_USER}/${APP_NAME}:latest
  restart: always

x-depends-on-configurator: &depends_on_configurator
  depends_on:
    configurator:
      condition: service_completed_successfully

x-backend-defaults: &backend_defaults
  <<: [*depends_on_configurator, *customizable_image]
  volumes:
    - sites:/home/frappe/frappe-bench/sites
    - assets:/home/frappe/frappe-bench/sites/assets
    - frappe-logs:/home/frappe/frappe-bench/logs
    - type: bind
      source: ${BACKUP_SERVER_PATH}
      target: /backup
    - type: bind
      source: ${CERTS_PATH}
      target: /certs

# foi necessário criar esta config separada para o configurator devido ao
# "restart: always" adicionado em customizable_image pois o
# configurator não pode ter restart senão entra em loop
x-configurator: &configurator
  image: ${DOCKER_USER}/${APP_NAME}:latest
  volumes:
    - sites:/home/frappe/frappe-bench/sites
    - assets:/home/frappe/frappe-bench/sites/assets
    - frappe-logs:/home/frappe/frappe-bench/logs

services:
  configurator:
    <<: *configurator
    entrypoint:
      - bash
      - -c
    command:
      - >
        ls -1 apps > sites/apps.txt;
        bench set-config -g db_host $$DB_HOST;
        bench set-config -gp db_port $$DB_PORT;
        bench set-config -g redis_cache "redis://$$REDIS_CACHE";
        bench set-config -g redis_queue "redis://$$REDIS_QUEUE";
        bench set-config -g redis_socketio "redis://$$REDIS_SOCKETIO";
        bench set-config -gp socketio_port $$SOCKETIO_PORT;
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      REDIS_CACHE: ${REDIS_CACHE}
      REDIS_QUEUE: ${REDIS_QUEUE}
      REDIS_SOCKETIO: ${REDIS_SOCKETIO}
      SOCKETIO_PORT: 9000
    depends_on: {}

  backend:
    <<: *backend_defaults

  frontend:
    <<: *customizable_image
    command:
      - nginx-entrypoint.sh
    environment:
      BACKEND: backend:8000
      SOCKETIO: websocket:9000
      FRAPPE_SITE_NAME_HEADER: ${FRAPPE_SITE_NAME_HEADER:-$$host}
      UPSTREAM_REAL_IP_ADDRESS: ${UPSTREAM_REAL_IP_ADDRESS:-127.0.0.1}
      UPSTREAM_REAL_IP_HEADER: ${UPSTREAM_REAL_IP_HEADER:-X-Forwarded-For}
      UPSTREAM_REAL_IP_RECURSIVE: ${UPSTREAM_REAL_IP_RECURSIVE:-off}
      PROXY_READ_TIMOUT: ${PROXY_READ_TIMOUT:-120}
      CLIENT_MAX_BODY_SIZE: ${CLIENT_MAX_BODY_SIZE:-50m}
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - assets:/home/frappe/frappe-bench/sites/assets
      - frappe-logs:/home/frappe/frappe-bench/logs
    depends_on:
      - backend
      - websocket

  websocket:
    <<: [*depends_on_configurator, *customizable_image]
    command:
      - node
      - /home/frappe/frappe-bench/apps/frappe/socketio.js
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - assets:/home/frappe/frappe-bench/sites/assets
      - frappe-logs:/home/frappe/frappe-bench/logs

  queue-short:
    <<: *backend_defaults
    command: bench worker --queue short

  queue-default:
    <<: *backend_defaults
    command: bench worker --queue default

  queue-long:
    <<: *backend_defaults
    command: bench worker --queue long

  scheduler:
    <<: *backend_defaults
    command: bench schedule

# ERPNext requires local assets access (Frappe does not)
volumes:
  sites:
  assets:
  frappe-logs:
  backup:
  certs:
